// 获取DOM元素
const charInput = document.getElementById('charInput');
const queryBtn = document.getElementById('queryBtn');
const strokeBtn = document.getElementById('strokeBtn');
const resultDiv = document.getElementById('result');

// 吉凶数理定义
const JIXIONG = {
    JI: [1, 3, 5, 6, 7, 8, 11, 13, 15, 16, 18, 21, 23, 24, 25, 31, 32, 33, 35, 37, 41, 45, 47, 48, 52, 57, 61, 63, 65, 67, 68, 81],
    BANJI: [17,26, 29, 30, 38, 39, 51, 58, 71, 73, 75, 77, 78],
    XIONG: [2, 4, 9, 10, 12, 14, 19, 20, 22, 27, 28, 34, 36, 40, 42, 43, 44, 46, 49, 50, 53, 54, 55, 56, 59, 60, 62, 64, 66, 69, 70, 72, 74, 76, 79, 80]
};

// 绑定跳转按钮点击事件
strokeBtn.addEventListener('click', () => {
    window.open('https://www.hanzipi.com/', '_blank');
});

// 绑定查询按钮点击事件
queryBtn.addEventListener('click', () => {
    const fullInput = charInput.value.trim();
    if (!fullInput) {
        resultDiv.innerHTML = '<p>请输入一个或多个姓名。</p>';
        return;
    }

    const names = fullInput.split(/,|，/)
                           .map(name => name.trim())
                           .filter(name => name);

    if (names.length === 0) {
        resultDiv.innerHTML = '<p>未检测到有效姓名，请检查输入。</p>';
        return;
    }

    const namesToProcess = names.slice(0, 10);
    let allTablesHTML = '';

    for (const name of namesToProcess) {
        if (!/^[\u4e00-\u9fa5]+$/.test(name)) {
            allTablesHTML += `<div class="error-msg">“${name}” 是无效输入，已跳过。请只输入汉字。</div>`;
            continue;
        }
        const nameInfo = getNameInfo(name);
        // 弹窗功能在批量模式下体验不佳，暂时注释
        // ...
        const fiveCases = calculateFiveCases(nameInfo.strokes);
        allTablesHTML += createResultTableHTML(nameInfo, fiveCases);
    }

    resultDiv.innerHTML = allTablesHTML;
});


function getNameInfo(name) {
    const info = {
        name: name,
        chars: [],
        tradChars: [],
        pinyins: [],
        strokes: [],
        wuxings: []
    };

    const specialTradMap = { '阳': '陽' };
    const specialStrokeMap = { '阳': 17 };

    for (const char of name) {
        let trad = cnchar.convert.simpleToTrad(char);
        if (specialTradMap[char]) {
            trad = specialTradMap[char];
        }
        
        let stroke;
        if (specialStrokeMap[char]) {
            stroke = specialStrokeMap[char];
        } else {
            stroke = cnchar.stroke(trad || char, 'name');
        }

        const pinyin = cnchar.spell(char);
        const wuxing = getWuXing(stroke);

        info.chars.push(char);
        info.tradChars.push(trad || char);
        info.pinyins.push(pinyin);
        info.strokes.push(stroke);
        info.wuxings.push(wuxing);
    }
    return info;
}


function calculateFiveCases(strokes) {
    const length = strokes.length;
    let tian, ren, di, wai, zong;

    zong = strokes.reduce((sum, s) => sum + s, 0);

    if (length === 1) { // 极少见，但作为边界处理
        tian = strokes[0] + 1;
        ren = strokes[0] + 1;
        di = 1;
        wai = 1;
    } else if (length === 2) { // 单姓单名
        tian = strokes[0] + 1;
        ren = strokes[0] + strokes[1];
        di = strokes[1] + 1;
        wai = 2;
    } else if (length === 3) { // 单姓复名
        tian = strokes[0] + 1;
        ren = strokes[0] + strokes[1];
        di = strokes[1] + strokes[2];
        wai = strokes[2] + 1;
    } else if (length >= 4) { // 复姓
        const xing1 = strokes[0];
        const xing2 = strokes[1];
        const ming1 = strokes[2];
        const mingLast = strokes[length - 1];

        tian = xing1 + xing2;
        ren = xing2 + ming1;
        di = strokes.slice(2).reduce((sum, s) => sum + s, 0);
        wai = xing1 + mingLast;
    }

    return {
        tian: { num: tian, ...getCaseDetails(tian) },
        ren: { num: ren, ...getCaseDetails(ren) },
        di: { num: di, ...getCaseDetails(di) },
        wai: { num: wai, ...getCaseDetails(wai) },
        zong: { num: zong, ...getCaseDetails(zong) }
    };
}


function getCaseDetails(stroke) {
    return {
        wuxing: getWuXing(stroke),
        jixiong: getJiXiong(stroke)
    };
}

function getWuXing(stroke) {
    if (!stroke || stroke === 0) return '无';
    const n = stroke % 10;
    if (n === 0) return '水'; // 10, 20 etc.
    const map = ['水', '木', '木', '火', '火', '土', '土', '金', '金', '水'];
    return map[n];
}

function getJiXiong(stroke) {
    if (JIXIONG.JI.includes(stroke)) return '吉';
    if (JIXIONG.BANJI.includes(stroke)) return '半吉';
    if (JIXIONG.XIONG.includes(stroke)) return '凶';
    return '无';
}

function createResultTableHTML(nameInfo, fiveCases) {
    const { chars, tradChars, pinyins, strokes, wuxings } = nameInfo;

    const buildRow = (title, data, caseInfo) => {
        let row = `<tr><th>${title}</th>`;
        data.forEach(d => { row += `<td>${d}</td>`; });
        if (caseInfo) {
            const isXiong = caseInfo.jixiong === '凶';
            const isHighlightable = caseInfo.name !== '天格';
            const style = (isXiong && isHighlightable) ? 'style="box-shadow: inset 0 0 0 2px red;"' : '';
            
            row += `<td ${style}>${caseInfo.name} → ${caseInfo.num} (${caseInfo.wuxing}) → ${caseInfo.jixiong}</td>`;
        }
        row += '</tr>';
        return row;
    };

    const tableHTML = `
        <table style="margin-bottom: 30px;">
            <tbody>
                ${buildRow('姓名', chars, { name: '天格', ...fiveCases.tian })}
                ${buildRow('繁体', tradChars, { name: '人格', ...fiveCases.ren })}
                ${buildRow('拼音', pinyins, { name: '地格', ...fiveCases.di })}
                ${buildRow('康熙笔画', strokes, { name: '外格', ...fiveCases.wai })}
                ${buildRow('字意五行', wuxings, { name: '总格', ...fiveCases.zong })}
            </tbody>
        </table>
    `;

    return tableHTML;
} 